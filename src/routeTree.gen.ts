/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ServicesImport } from './routes/services'
import { Route as LisaEldridgeImport } from './routes/lisaEldridge'
import { Route as FeaturedImport } from './routes/featured'
import { Route as BeautyImport } from './routes/beauty'
import { Route as AudioImport } from './routes/audio'
import { Route as AdamReedImport } from './routes/adamReed'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ServicesRoute = ServicesImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRoute,
} as any)

const LisaEldridgeRoute = LisaEldridgeImport.update({
  id: '/lisaEldridge',
  path: '/lisaEldridge',
  getParentRoute: () => rootRoute,
} as any)

const FeaturedRoute = FeaturedImport.update({
  id: '/featured',
  path: '/featured',
  getParentRoute: () => rootRoute,
} as any)

const BeautyRoute = BeautyImport.update({
  id: '/beauty',
  path: '/beauty',
  getParentRoute: () => rootRoute,
} as any)

const AudioRoute = AudioImport.update({
  id: '/audio',
  path: '/audio',
  getParentRoute: () => rootRoute,
} as any)

const AdamReedRoute = AdamReedImport.update({
  id: '/adamReed',
  path: '/adamReed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/adamReed': {
      id: '/adamReed'
      path: '/adamReed'
      fullPath: '/adamReed'
      preLoaderRoute: typeof AdamReedImport
      parentRoute: typeof rootRoute
    }
    '/audio': {
      id: '/audio'
      path: '/audio'
      fullPath: '/audio'
      preLoaderRoute: typeof AudioImport
      parentRoute: typeof rootRoute
    }
    '/beauty': {
      id: '/beauty'
      path: '/beauty'
      fullPath: '/beauty'
      preLoaderRoute: typeof BeautyImport
      parentRoute: typeof rootRoute
    }
    '/featured': {
      id: '/featured'
      path: '/featured'
      fullPath: '/featured'
      preLoaderRoute: typeof FeaturedImport
      parentRoute: typeof rootRoute
    }
    '/lisaEldridge': {
      id: '/lisaEldridge'
      path: '/lisaEldridge'
      fullPath: '/lisaEldridge'
      preLoaderRoute: typeof LisaEldridgeImport
      parentRoute: typeof rootRoute
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/adamReed': typeof AdamReedRoute
  '/audio': typeof AudioRoute
  '/beauty': typeof BeautyRoute
  '/featured': typeof FeaturedRoute
  '/lisaEldridge': typeof LisaEldridgeRoute
  '/services': typeof ServicesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/adamReed': typeof AdamReedRoute
  '/audio': typeof AudioRoute
  '/beauty': typeof BeautyRoute
  '/featured': typeof FeaturedRoute
  '/lisaEldridge': typeof LisaEldridgeRoute
  '/services': typeof ServicesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/adamReed': typeof AdamReedRoute
  '/audio': typeof AudioRoute
  '/beauty': typeof BeautyRoute
  '/featured': typeof FeaturedRoute
  '/lisaEldridge': typeof LisaEldridgeRoute
  '/services': typeof ServicesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/adamReed'
    | '/audio'
    | '/beauty'
    | '/featured'
    | '/lisaEldridge'
    | '/services'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/adamReed'
    | '/audio'
    | '/beauty'
    | '/featured'
    | '/lisaEldridge'
    | '/services'
  id:
    | '__root__'
    | '/'
    | '/adamReed'
    | '/audio'
    | '/beauty'
    | '/featured'
    | '/lisaEldridge'
    | '/services'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdamReedRoute: typeof AdamReedRoute
  AudioRoute: typeof AudioRoute
  BeautyRoute: typeof BeautyRoute
  FeaturedRoute: typeof FeaturedRoute
  LisaEldridgeRoute: typeof LisaEldridgeRoute
  ServicesRoute: typeof ServicesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdamReedRoute: AdamReedRoute,
  AudioRoute: AudioRoute,
  BeautyRoute: BeautyRoute,
  FeaturedRoute: FeaturedRoute,
  LisaEldridgeRoute: LisaEldridgeRoute,
  ServicesRoute: ServicesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/adamReed",
        "/audio",
        "/beauty",
        "/featured",
        "/lisaEldridge",
        "/services"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/adamReed": {
      "filePath": "adamReed.tsx"
    },
    "/audio": {
      "filePath": "audio.tsx"
    },
    "/beauty": {
      "filePath": "beauty.tsx"
    },
    "/featured": {
      "filePath": "featured.tsx"
    },
    "/lisaEldridge": {
      "filePath": "lisaEldridge.tsx"
    },
    "/services": {
      "filePath": "services.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
